Index: app/src/main/java/com/binus/pekalongancityguide/Layout/Register.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.binus.pekalongancityguide.Layout;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Patterns;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.binus.pekalongancityguide.R;\r\nimport com.binus.pekalongancityguide.databinding.ActivityRegisterBinding;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Register extends AppCompatActivity {\r\n    FirebaseAuth firebaseAuth;\r\n    ImageButton back;\r\n    EditText user, email, pass, cpass;\r\n    String Username, Email, Password, Cfmpass;\r\n    TextInputLayout til, ctil, etil, util;\r\n    Button register;\r\n    ProgressDialog progressDialog;\r\n    private ActivityRegisterBinding binding;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        binding = ActivityRegisterBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        progressDialog = new ProgressDialog(this);\r\n        progressDialog.setTitle(\"Please Wait\");\r\n        progressDialog.setCanceledOnTouchOutside(false);\r\n\r\n        init();\r\n\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n\r\n        binding.regisBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                validate();\r\n            }\r\n        });\r\n        til.getEditText().setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View v, boolean hasFocus) {\r\n                if (hasFocus) {\r\n                    // The user has clicked on the text input layout\r\n                    til.setPasswordVisibilityToggleEnabled(true);\r\n                } else {\r\n                    // The user has left the text input layout\r\n                }\r\n            }\r\n        });\r\n\r\n        ctil.getEditText().setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View v, boolean hasFocus) {\r\n                if (hasFocus) {\r\n                    // The user has clicked on the text input layout\r\n                    ctil.setPasswordVisibilityToggleEnabled(true);\r\n                } else {\r\n                    // The user has left the text input layout\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    void init(){\r\n        back = findViewById(R.id.backtoLogin);\r\n        user = findViewById(R.id.regis_user);\r\n        email = findViewById(R.id.regis_email);\r\n        pass = findViewById(R.id.regis_pass);\r\n        til = findViewById(R.id.regispass_til);\r\n        register = findViewById(R.id.regis_btn);\r\n        cpass = findViewById(R.id.regis_cpass);\r\n        ctil = findViewById(R.id.regiscpass_til);\r\n        etil = findViewById(R.id.regisemail_til);\r\n        util = findViewById(R.id.regisuser_til);\r\n        firebaseAuth = FirebaseAuth.getInstance();\r\n\r\n        Username = binding.regisUser.getText().toString().trim();\r\n        Email = binding.regisEmail.getText().toString().trim();\r\n        Password = binding.regisPass.getText().toString().trim();\r\n        Cfmpass = binding.regisCpass.getText().toString().trim();\r\n    }\r\n    void validate(){\r\n        boolean isEmpty = false;\r\n        EditText[] textFields = new EditText[] {user, email, pass, cpass};\r\n\r\n        for (EditText textfield : textFields) {\r\n            if (TextUtils.isEmpty(textfield.getText().toString())) {\r\n                isEmpty = true;\r\n                textfield.setError(\"All fields must not be empty!\");\r\n                if (textfield == pass || textfield == cpass) {\r\n                    til.setPasswordVisibilityToggleEnabled(false);\r\n                    ctil.setPasswordVisibilityToggleEnabled(false);\r\n                }\r\n            }\r\n        }if (isEmpty) {\r\n            return;\r\n        }else if(Username.length()<3 || Username.length()>12){\r\n            user.setError(\"Username must be between 3-12 characters!\");\r\n        }else if(!checkPass(Password)){\r\n                pass.setError(\"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.\");\r\n        } else if(!Patterns.EMAIL_ADDRESS.matcher(Email).matches()){\r\n            email.setError(\"Invalid Email Address!\");\r\n        }else if(!Password.equals(Cfmpass)){\r\n            cpass.setError(\"Password doesn't match!\");\r\n        }else{\r\n            createUser();\r\n        }\r\n    }\r\n    public boolean checkPass(String Password) {\r\n        boolean hasUppercase = !Password.equals(Password.toLowerCase());\r\n        boolean hasLowercase = !Password.equals(Password.toUpperCase());\r\n        boolean hasNumber = Password.matches(\".*\\\\d.*\");\r\n        boolean hasSpecialChar = !Password.matches(\"[A-Za-z0-9]*\");\r\n\r\n        return (Password.length() >= 8 && hasUppercase && hasLowercase && hasNumber && hasSpecialChar);\r\n    }\r\n\r\n    private void createUser(){\r\n        progressDialog.setMessage(\"Creating account...\");\r\n        progressDialog.show();\r\n        firebaseAuth.createUserWithEmailAndPassword(Email,Password)\r\n                .addOnSuccessListener(new OnSuccessListener<AuthResult>() {\r\n                    @Override\r\n                    public void onSuccess(AuthResult authResult) {\r\n                        progressDialog.dismiss();\r\n                        addUser();\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Toast.makeText(Register.this, \"\"+e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void addUser() {\r\n        progressDialog.setMessage(\"Saving user info\");\r\n        long timestamp = System.currentTimeMillis();\r\n        String uid = firebaseAuth.getUid();\r\n        HashMap<String, Object> hashMap = new HashMap<>();\r\n        hashMap.put(\"uid\",uid);\r\n        hashMap.put(\"Email\",Email);\r\n        hashMap.put(\"Username\",Username);\r\n        hashMap.put(\"profileImage\",\"\");\r\n        hashMap.put(\"userType\",\"user\");\r\n        hashMap.put(\"timestamp\", timestamp);\r\n        DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference(\"Users\");\r\n        databaseReference.child(uid)\r\n                .setValue(hashMap)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void unused) {\r\n                        progressDialog.dismiss();\r\n                        Toast.makeText(Register.this, \"Account created!\", Toast.LENGTH_SHORT).show();\r\n                        startActivity(new Intent(Register.this,Home.class));\r\n                        finish();\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Toast.makeText(Register.this, \"\"+e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/binus/pekalongancityguide/Layout/Register.java b/app/src/main/java/com/binus/pekalongancityguide/Layout/Register.java
--- a/app/src/main/java/com/binus/pekalongancityguide/Layout/Register.java	(revision bb7bcbced4705f425a4d0ad71efe2452c124bf26)
+++ b/app/src/main/java/com/binus/pekalongancityguide/Layout/Register.java	(date 1678860225678)
@@ -133,14 +133,56 @@
             createUser();
         }
     }
-    public boolean checkPass(String Password) {
-        boolean hasUppercase = !Password.equals(Password.toLowerCase());
-        boolean hasLowercase = !Password.equals(Password.toUpperCase());
-        boolean hasNumber = Password.matches(".*\\d.*");
-        boolean hasSpecialChar = !Password.matches("[A-Za-z0-9]*");
+
+    private boolean isUsernameValid(String username) {
+        // Username should be at least 4 characters long
+        return username.length() >= 4;
+    }
+
+    private boolean isEmailValid(String email) {
+        // Email should be a valid email address
+        return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();
+    }
+
+    private boolean isPasswordValid(String password) {
+        // Password should be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character
+        boolean hasUppercase = !password.equals(password.toLowerCase());
+        boolean hasLowercase = !password.equals(password.toUpperCase());
+        boolean hasNumber = password.matches(".\d.");
+        boolean hasSpecialChar = !password.matches("[A-Za-z0-9]*");
+        return (password.length() >= 8 && hasUppercase && hasLowercase && hasNumber && hasSpecialChar);
+    }
+
+    void validate() {
+        String username = Username.getText().toString().trim();
+        String email = Email.getText().toString().trim();
+        String password = Password.getText().toString().trim();
+        String confirmPassword = Cfmpass.getText().toString().trim();
+
+        if (!isUsernameValid(username)) {
+            user.setError("Username must be at least 4 characters long.");
+            return;
+        }
+
+        if (!isEmailValid(email)) {
+            email.setError("Please enter a valid email address.");
+            return;
+        }
+
+        if (!isPasswordValid(password)) {
+            pass.setError("Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.");
+            return;
+        }
+
+        if (!password.equals(confirmPassword)) {
+            cpass.setError("Passwords do not match.");
+            return;
+        }
 
-        return (Password.length() >= 8 && hasUppercase && hasLowercase && hasNumber && hasSpecialChar);
+        // All validation rules pass, create user
+        createUser();
     }
+
 
     private void createUser(){
         progressDialog.setMessage("Creating account...");
