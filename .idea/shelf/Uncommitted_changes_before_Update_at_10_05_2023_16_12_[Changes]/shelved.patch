Index: app/src/main/java/com/binus/pekalongancityguide/Layout/ItineraryList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.binus.pekalongancityguide.Layout;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.binus.pekalongancityguide.R;\r\nimport com.binus.pekalongancityguide.databinding.FragmentItineraryDetailsBinding;\r\nimport com.binus.pekalongancityguide.databinding.FragmentItineraryListBinding;\r\n\r\npublic class ItineraryList extends Fragment {\r\n    private FragmentItineraryListBinding binding;\r\n    public ItineraryList() {}\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = FragmentItineraryListBinding.inflate(inflater, container, false);\r\n        return binding.getRoot();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/binus/pekalongancityguide/Layout/ItineraryList.java b/app/src/main/java/com/binus/pekalongancityguide/Layout/ItineraryList.java
--- a/app/src/main/java/com/binus/pekalongancityguide/Layout/ItineraryList.java	(revision 1aa70a77a2da9fde87855ea847882b36483d006c)
+++ b/app/src/main/java/com/binus/pekalongancityguide/Layout/ItineraryList.java	(date 1683709821405)
@@ -2,28 +2,136 @@
 
 import android.os.Bundle;
 
+import androidx.annotation.NonNull;
+import androidx.core.content.ContextCompat;
 import androidx.fragment.app.Fragment;
 
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.Toast;
 
+import com.binus.pekalongancityguide.ItemTemplate.Itinerary;
 import com.binus.pekalongancityguide.R;
 import com.binus.pekalongancityguide.databinding.FragmentItineraryDetailsBinding;
 import com.binus.pekalongancityguide.databinding.FragmentItineraryListBinding;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.Query;
+import com.google.firebase.database.ValueEventListener;
+
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Objects;
+
+import static android.content.ContentValues.TAG;
 
 public class ItineraryList extends Fragment {
     private FragmentItineraryListBinding binding;
+    private FirebaseAuth firebaseAuth;
+    private DatabaseReference userRef;
+    private FirebaseDatabase database;
+    private Query itineraryQuery;
     public ItineraryList() {}
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        firebaseAuth = FirebaseAuth.getInstance();
+        FirebaseDatabase.getInstance().setPersistenceEnabled(true);
     }
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         binding = FragmentItineraryListBinding.inflate(inflater, container, false);
+        database = FirebaseDatabase.getInstance("https://pekalongan-city-guide-5bf2e-default-rtdb.asia-southeast1.firebasedatabase.app/");
+        userRef = database.getReference("Users").child(Objects.requireNonNull(firebaseAuth.getUid()));
+        userRef.keepSynced(true);
+        itineraryQuery = userRef.child("itineraries");
+        loadItinerary();
+        sortItinerary();
         return binding.getRoot();
     }
+
+    private void loadItinerary() {
+        itineraryQuery.addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                List<Itinerary> itineraryList = new ArrayList<>();
+                for (DataSnapshot itinerarySnapshot : snapshot.getChildren()) {
+                    String itineraryName = itinerarySnapshot.getChildren().toString();
+                    Log.d(TAG, "iter name: " + itineraryName);
+
+                }
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+
+            }
+        });
+    }
+
+    private void sortItinerary(){
+
+        itineraryQuery.addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                HashSet<String> uniqueDates = new HashSet<>();
+                for (DataSnapshot itinerarySnapshot : snapshot.getChildren()) {
+                    String date = itinerarySnapshot.child("date").getValue(String.class);
+                    if (date != null && !date.isEmpty()) {
+                        Log.d(TAG, "date: " + date);
+                        date = convertWithoutDay(date);
+                        uniqueDates.add(date);
+                    }
+                }
+
+                List<String> dates = new ArrayList<>(uniqueDates);
+                Collections.sort(dates, new Comparator<String>() {
+                    DateFormat dateFormat = new SimpleDateFormat("dd MMMM", Locale.getDefault());
+                    @Override
+                    public int compare(String date1, String date2) {
+                        try {
+                            Date dateObj1 = dateFormat.parse(date1);
+                            Date dateObj2 = dateFormat.parse(date2);
+                            return dateObj1.compareTo(dateObj2);
+                        } catch (ParseException e) {
+                            e.printStackTrace();
+                            return 0;
+                        }
+                    }
+                });
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+            }
+        });
+    }
+
+    private String convertWithoutDay(String dateStr) {
+        try {
+            DateFormat originalDateFormat = new SimpleDateFormat("EEEE, dd MMMM yyyy", Locale.getDefault());
+            Date date = originalDateFormat.parse(dateStr);
+            DateFormat targetDateFormat = new SimpleDateFormat("dd MMMM yyyy", Locale.getDefault());
+            return targetDateFormat.format(date);
+        } catch (ParseException e) {
+            Log.e("ItineraryList", "Error parsing date: " + dateStr, e);
+            Toast.makeText(getContext(), "Error parsing date: " + dateStr, Toast.LENGTH_SHORT).show();
+            return "";
+        }
+    }
 }
\ No newline at end of file
