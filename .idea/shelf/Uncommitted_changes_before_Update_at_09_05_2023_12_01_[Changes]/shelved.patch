Index: app/src/main/res/layout/dialog_change_loc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <data>\r\n\r\n    </data>\r\n\r\n    <androidx.cardview.widget.CardView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:cardElevation=\"4dp\"\r\n        app:cardCornerRadius=\"16dp\"\r\n        android:layout_marginHorizontal=\"5dp\"\r\n        android:layout_marginVertical=\"5dp\">\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/dialog_container\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:background=\"@color/palette_4\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:layout_marginLeft=\"10dp\"\r\n                android:layout_marginVertical=\"10dp\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:textStyle=\"bold\"\r\n                android:fontFamily=\"@font/poppins_semibold\"\r\n                android:text=\"Choose Location\"\r\n                android:textSize=\"24dp\"\r\n                android:textColor=\"@color/palette_1\" />\r\n\r\n            <fragment\r\n                android:id=\"@+id/autocomplete_fragment\"\r\n                android:name=\"com.google.android.libraries.places.widget.AutocompleteSupportFragment\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginBottom=\"10dp\"\r\n                android:hint=\"Enter a location\" />\r\n\r\n            <fragment\r\n                android:id=\"@+id/user_map\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"200dp\"\r\n                android:layout_marginBottom=\"20dp\"\r\n                android:name=\"com.google.android.gms.maps.SupportMapFragment\"></fragment>\r\n\r\n            <TextView\r\n                android:id=\"@+id/locTv\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Your Location\"\r\n                android:paddingHorizontal=\"15dp\"\r\n                android:paddingVertical=\"5dp\"\r\n                android:fontFamily=\"@font/poppins_regular\"\r\n                android:textColor=\"@color/palette_2\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/use_cur_loc\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:includeFontPadding=\"false\"\r\n                android:drawablePadding=\"10dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:drawableTint=\"@color/palette_1\"\r\n                android:drawableLeft=\"@drawable/my_loc\"\r\n                android:text=\"Use current location\"\r\n                android:background=\"@color/ic_launcher_background\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingHorizontal=\"15dp\"\r\n                android:paddingVertical=\"5dp\"\r\n                android:fontFamily=\"@font/poppins_regular\"\r\n                android:textColor=\"@color/palette_2\" />\r\n            <Button\r\n                android:id=\"@+id/set_loc_btn\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:textColor=\"@color/palette_4\"\r\n                android:text=\"Set Location\"/>\r\n        </LinearLayout>\r\n    </androidx.cardview.widget.CardView>\r\n</layout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/dialog_change_loc.xml b/app/src/main/res/layout/dialog_change_loc.xml
--- a/app/src/main/res/layout/dialog_change_loc.xml	(revision 57c4058aeeed9cdb10889cde80a1e30269330a08)
+++ b/app/src/main/res/layout/dialog_change_loc.xml	(date 1683536664088)
@@ -11,8 +11,7 @@
         android:layout_height="wrap_content"
         app:cardElevation="4dp"
         app:cardCornerRadius="16dp"
-        android:layout_marginHorizontal="5dp"
-        android:layout_marginVertical="5dp">
+        >
 
         <LinearLayout
             android:id="@+id/dialog_container"
@@ -32,13 +31,20 @@
                 android:textSize="24dp"
                 android:textColor="@color/palette_1" />
 
-            <fragment
-                android:id="@+id/autocomplete_fragment"
-                android:name="com.google.android.libraries.places.widget.AutocompleteSupportFragment"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginBottom="10dp"
-                android:hint="Enter a location" />
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="@color/palette_2">
+
+                <fragment
+                    android:id="@+id/autocomplete_fragment"
+                    android:name="com.google.android.libraries.places.widget.AutocompleteSupportFragment"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginBottom="10dp"/>
+
+            </LinearLayout>
+
 
             <fragment
                 android:id="@+id/user_map"
Index: app/src/main/java/com/binus/pekalongancityguide/Layout/ShowDestinationFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.binus.pekalongancityguide.Layout;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.CheckBox;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.binus.pekalongancityguide.Adapter.DestinationAdapter;\r\nimport com.binus.pekalongancityguide.ItemTemplate.Destination;\r\nimport com.binus.pekalongancityguide.R;\r\nimport com.binus.pekalongancityguide.databinding.DialogChangeLocBinding;\r\nimport com.binus.pekalongancityguide.databinding.DialogSortDestiBinding;\r\nimport com.binus.pekalongancityguide.databinding.FragmentShowDestinationBinding;\r\nimport com.google.android.gms.common.api.Status;\r\nimport com.google.android.gms.location.FusedLocationProviderClient;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.maps.CameraUpdate;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.MapStyleOptions;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.libraries.places.api.Places;\r\nimport com.google.android.libraries.places.api.model.Place;\r\nimport com.google.android.libraries.places.api.net.PlacesClient;\r\nimport com.google.android.libraries.places.widget.AutocompleteSupportFragment;\r\nimport com.google.android.libraries.places.widget.listener.PlaceSelectionListener;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport static com.binus.pekalongancityguide.BuildConfig.MAPS_API_KEY;\r\n\r\npublic class ShowDestinationFragment extends Fragment {\r\n    private final FirebaseDatabase database = FirebaseDatabase.getInstance(\"https://pekalongan-city-guide-5bf2e-default-rtdb.asia-southeast1.firebasedatabase.app/\");\r\n    private static final int PERMISSION_REQUEST_LOCATION = 500;\r\n    private String categoryId;\r\n    private String category;\r\n    private ArrayList<Destination> destinationArrayList;\r\n    private DestinationAdapter destinationAdapter;\r\n    private static final String TAG = \"DESTI_USER_TAG\";\r\n    private FragmentShowDestinationBinding binding;\r\n    private FusedLocationProviderClient fusedLocationClient;\r\n    private LocationManager locationManager;\r\n    private LocationListener locationListener;\r\n    private Geocoder geocoder;\r\n    private AutocompleteSupportFragment autocompleteFragment;\r\n    private SupportMapFragment fragment;\r\n    private LatLng coordinate;\r\n    private String addressString;\r\n    private double currentLat, currentLng;\r\n    private float distance;\r\n    private boolean isChangeLocDialogShowing = false;\r\n    private static SharedPreferences prefs;\r\n\r\n    public ShowDestinationFragment() {\r\n    }\r\n\r\n    public static ShowDestinationFragment newInstance(String categoryId, String category, String uid) {\r\n        ShowDestinationFragment fragment = new ShowDestinationFragment();\r\n        Bundle args = new Bundle();\r\n        args.putString(\"categoryId\", categoryId);\r\n        args.putString(\"category\", category);\r\n        args.putString(\"uid\", uid);\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState){\r\n        super.onCreate(savedInstanceState);\r\n        geocoder = new Geocoder(getContext(), Locale.getDefault());\r\n        if(getArguments()!=null){\r\n            categoryId = getArguments().getString(\"categoryId\");\r\n            category = getArguments().getString(\"category\");\r\n        }\r\n    }\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        prefs = getActivity().getSharedPreferences(\"coordinate\", Context.MODE_PRIVATE);\r\n        String lastLatitude = prefs.getString(\"lastLatitude\", \"0\");\r\n        String lastLongitude = prefs.getString(\"lastLongitude\", \"0\");\r\n        if (!lastLatitude.equals(\"0\") && !lastLongitude.equals(\"0\")) {\r\n            double latitude = Double.parseDouble(lastLatitude);\r\n            double longitude = Double.parseDouble(lastLongitude);\r\n            coordinate = new LatLng(latitude, longitude);\r\n        }\r\n        Log.d(TAG, \"ON START COORDINATES: \" + coordinate);\r\n        binding = FragmentShowDestinationBinding.inflate(LayoutInflater.from(getContext()), container, false);\r\n        if (category.equals(\"All\")) {\r\n            loadDestinations();\r\n        } else {\r\n            loadCategoriedDestination();\r\n        }\r\n        locationManager = (LocationManager) getContext().getSystemService(Context.LOCATION_SERVICE);\r\n        locationListener = new LocationListener() {\r\n            @Override\r\n            public void onLocationChanged(Location location) {\r\n                Log.d(\"Location\", \"Latitude: \" + location.getLatitude() + \", Longitude: \" + location.getLongitude());\r\n            }\r\n\r\n            @Override\r\n            public void onStatusChanged(String provider, int status, Bundle extras) {\r\n            }\r\n\r\n            @Override\r\n            public void onProviderEnabled(String provider) {\r\n            }\r\n\r\n            @Override\r\n            public void onProviderDisabled(String provider) {\r\n            }\r\n        };\r\n\r\n        if (ContextCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST_LOCATION);\r\n        } else {\r\n            startLocationUpdates();\r\n        }\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(getContext());\r\n        binding.searchDesti.addTextChangedListener(new TextWatcher(){\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                try {\r\n                    destinationAdapter.getFilter().filter(s);\r\n                }catch (Exception e){\r\n                    Log.d(TAG,\"onTextChanged :\"+e.getMessage());\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n\r\n            }\r\n        });\r\n        binding.sortButton.setOnClickListener(v ->{\r\n            showSortDialog();\r\n        });\r\n        binding.locLayout.setOnClickListener(v -> {\r\n            if (getContext() != null && ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&\r\n                    ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n                ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_REQUEST_LOCATION);\r\n            } else {\r\n                showChangeLocDialog();\r\n            }\r\n        });\r\n\r\n        return binding.getRoot();\r\n    }\r\n\r\n    private void showChangeLocDialog() {\r\n        if (isChangeLocDialogShowing) {\r\n            return;\r\n        }\r\n        isChangeLocDialogShowing = true;\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());\r\n        DialogChangeLocBinding locBinding = DialogChangeLocBinding.inflate(getLayoutInflater());\r\n        builder.setView(locBinding.getRoot());\r\n        AlertDialog dialog = builder.create();\r\n        dialog.setOnDismissListener(dialog1 -> {\r\n            getChildFragmentManager().beginTransaction().remove(fragment).commit();\r\n            getChildFragmentManager().beginTransaction().remove(autocompleteFragment).commit();\r\n            isChangeLocDialogShowing = false;\r\n        });\r\n        dialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_background);\r\n        dialog.show();\r\n        if (!Places.isInitialized()) {\r\n            Places.initialize(getActivity().getApplicationContext(), MAPS_API_KEY);\r\n        }\r\n        List<Address> addresses = null;\r\n        try {\r\n            addresses = geocoder.getFromLocation(currentLat, currentLng, 1);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (addresses != null && addresses.size() > 0) {\r\n            Address address = addresses.get(0);\r\n            StringBuilder sb = new StringBuilder();\r\n            for (int i = 0; i <= address.getMaxAddressLineIndex(); i++) {\r\n                sb.append(address.getAddressLine(i)).append(\", \");\r\n            }\r\n            addressString = sb.toString();\r\n            locBinding.locTv.setText(addressString);\r\n        } else {\r\n            locBinding.locTv.setText(\"Address not found\");\r\n        }\r\n        fragment = (SupportMapFragment) getChildFragmentManager()\r\n                .findFragmentById(R.id.user_map);\r\n        fragment.getMapAsync(googleMap -> {\r\n            coordinate = new LatLng(currentLat, currentLng);\r\n            MarkerOptions marker = new MarkerOptions();\r\n            marker.position(coordinate);\r\n            marker.title(\"Current Location\");\r\n            googleMap.addMarker(marker);\r\n            CameraUpdate cameraUpdate = CameraUpdateFactory.newLatLngZoom(coordinate, 15);\r\n            googleMap.moveCamera(cameraUpdate);\r\n            googleMap.setMapStyle(MapStyleOptions.loadRawResourceStyle(getContext(), R.raw.map_style));\r\n        });\r\n        PlacesClient placesClient = Places.createClient(getContext());\r\n        autocompleteFragment = (AutocompleteSupportFragment) getChildFragmentManager().findFragmentById(R.id.autocomplete_fragment);\r\n        autocompleteFragment.setPlaceFields(Arrays.asList(Place.Field.ID, Place.Field.NAME, Place.Field.ADDRESS, Place.Field.LAT_LNG));\r\n        autocompleteFragment.setOnPlaceSelectedListener(new PlaceSelectionListener() {\r\n            @Override\r\n            public void onPlaceSelected(@NonNull Place place) {\r\n                coordinate = place.getLatLng();\r\n                fragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.user_map);\r\n                fragment.getMapAsync(googleMap -> {\r\n                    googleMap.clear();\r\n                    MarkerOptions marker = new MarkerOptions();\r\n                    marker.position(coordinate);\r\n                    marker.title(place.getName());\r\n                    googleMap.addMarker(marker);\r\n                    CameraUpdate cameraUpdate = CameraUpdateFactory.newLatLngZoom(coordinate, 15);\r\n                    googleMap.moveCamera(cameraUpdate);\r\n                });\r\n                locBinding.locTv.setText(place.getAddress());\r\n                addressString = place.getAddress();\r\n            }\r\n\r\n            @Override\r\n            public void onError(@NonNull Status status) {\r\n                Log.e(TAG, \"An error occurred: \" + status);\r\n            }\r\n        });\r\n        locBinding.useCurLoc.setOnClickListener(v -> {\r\n            if (getContext() != null && ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&\r\n                    ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n                ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_REQUEST_LOCATION);\r\n            } else {\r\n                fusedLocationClient.getLastLocation().addOnSuccessListener(location -> {\r\n                    if (location != null) {\r\n                        currentLat = location.getLatitude();\r\n                        currentLng = location.getLongitude();\r\n                        coordinate = new LatLng(currentLat, currentLng);\r\n\r\n                        new AsyncTask<Void, Void, String>() {\r\n                            @Override\r\n                            protected String doInBackground(Void... voids) {\r\n                                try {\r\n                                    List<Address> addresses = geocoder.getFromLocation(currentLat, currentLng, 1);\r\n                                    if (addresses.size() > 0) {\r\n                                        return addresses.get(0).getAddressLine(0);\r\n                                    }\r\n                                } catch (IOException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                                return null;\r\n                            }\r\n\r\n                            @Override\r\n                            protected void onPostExecute(String address) {\r\n                                if (address != null) {\r\n                                    Log.d(\"ADDRESS IN DIALOG\", address);\r\n                                    addressString = address;\r\n                                    locBinding.locTv.setText(addressString);\r\n                                    autocompleteFragment.setText(addressString);\r\n                                    fragment.getMapAsync(googleMap -> {\r\n                                        coordinate = new LatLng(currentLat, currentLng);\r\n                                        MarkerOptions marker = new MarkerOptions();\r\n                                        marker.position(coordinate);\r\n                                        marker.title(\"Current Location\");\r\n                                        googleMap.addMarker(marker);\r\n                                        CameraUpdate cameraUpdate = CameraUpdateFactory.newLatLngZoom(coordinate, 15);\r\n                                        googleMap.moveCamera(cameraUpdate);\r\n                                        googleMap.setMapStyle(MapStyleOptions.loadRawResourceStyle(getContext(), R.raw.map_style));\r\n                                    });\r\n                                }\r\n                            }\r\n                        }.execute();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        locBinding.setLocBtn.setOnClickListener(v -> {\r\n            binding.changeLoc.setText(addressString);\r\n            dialog.dismiss();\r\n            updateDistances();\r\n            if (coordinate != null) {\r\n                SharedPreferences.Editor editor = prefs.edit();\r\n                editor.putString(\"lastLatitude\", String.valueOf(coordinate.latitude));\r\n                editor.putString(\"lastLongitude\", String.valueOf(coordinate.longitude));\r\n                editor.apply();\r\n            }\r\n            Log.d(TAG, \"COORDINATES: \" + coordinate);\r\n        });\r\n    }\r\n\r\n    public void showSortDialog(){\r\n        DialogSortDestiBinding binding1 = DialogSortDestiBinding.inflate(LayoutInflater.from(getContext()));\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());\r\n        CheckBox ratingCheck = binding1.ratingSort;\r\n        CheckBox distanceCheck = binding1.distanceSort;\r\n        builder.setView(binding1.getRoot());\r\n        builder.setPositiveButton(R.string.sort_txt, (dialog, which) -> {\r\n            int start = 0;\r\n            if (ratingCheck.isChecked() && distanceCheck.isChecked()) {\r\n                Collections.sort(destinationArrayList, (destination1, destination2) -> {\r\n                    Double rating1 = Double.parseDouble(destination1.getRating());\r\n                    Double rating2 = Double.parseDouble(destination2.getRating());\r\n                    Float distance1 = destination1.getDistance();\r\n                    Float distance2 = destination2.getDistance();\r\n                    int distanceCompare = distance1.compareTo(distance2);\r\n                    if (distanceCompare != 0) {\r\n                        return distanceCompare;\r\n                    }\r\n                    return Double.compare(rating1, rating2);\r\n                });\r\n            } else if (ratingCheck.isChecked()) {\r\n                Collections.sort(destinationArrayList, (destination1, destination2) -> {\r\n                    Double rating1 = Double.parseDouble(destination1.getRating());\r\n                    Double rating2 = Double.parseDouble(destination2.getRating());\r\n                    return Double.compare(rating2, rating1);\r\n                });\r\n            } else if (distanceCheck.isChecked()) {\r\n                Collections.sort(destinationArrayList, (destination1, destination2) -> {\r\n                    Float distance1 = destination1.getDistance();\r\n                    Float distance2 = destination2.getDistance();\r\n                    return distance1.compareTo(distance2);\r\n                });\r\n            }\r\n            String searchText = binding.searchDesti.getText().toString().trim();\r\n            destinationAdapter.getFilter().filter(searchText);\r\n            int itemCount = destinationArrayList.size() - start;\r\n            destinationAdapter.notifyItemRangeChanged(start, itemCount);\r\n        });\r\n\r\n        builder.setNegativeButton(R.string.cancel_txt, (dialog, which) -> {\r\n            dialog.dismiss();\r\n        });\r\n\r\n        AlertDialog dialog = builder.create();\r\n        dialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_background);\r\n        dialog.show();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        locationManager.removeUpdates(locationListener);\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == PERMISSION_REQUEST_LOCATION) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                startLocationUpdates();\r\n            } else {\r\n                Toast.makeText(getContext(), \"Location permission denied\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void loadDestinations() {\r\n        destinationArrayList = new ArrayList<>();\r\n        DatabaseReference reference = FirebaseDatabase.getInstance(\"https://pekalongan-city-guide-5bf2e-default-rtdb.asia-southeast1.firebasedatabase.app/\").getReference(\"Destination\");\r\n        reference.keepSynced(true);\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                destinationArrayList.clear();\r\n                for (DataSnapshot dataSnapshot : snapshot.getChildren()) {\r\n                    Destination destination = dataSnapshot.getValue(Destination.class);\r\n                    destinationArrayList.add(destination);\r\n                }\r\n                updateDistances();\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.e(TAG, \"Error: \" + error.getMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void loadCategoriedDestination(){\r\n        destinationArrayList = new ArrayList<>();\r\n        DatabaseReference reference = FirebaseDatabase.getInstance(\"https://pekalongan-city-guide-5bf2e-default-rtdb.asia-southeast1.firebasedatabase.app/\").getReference(\"Destination\");\r\n        reference.keepSynced(true);\r\n        reference.orderByChild(\"categoryId\").equalTo(categoryId)\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        destinationArrayList.clear();\r\n                        for (DataSnapshot dataSnapshot : snapshot.getChildren()) {\r\n                            Destination destination = dataSnapshot.getValue(Destination.class);\r\n                            destinationArrayList.add(destination);\r\n                        }\r\n                        updateDistances();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void updateDistances() {\r\n        for (Destination destination : destinationArrayList) {\r\n            getDestinationDistance(destination);\r\n        }\r\n        if (destinationAdapter == null) {\r\n            destinationAdapter = new DestinationAdapter(getContext(), destinationArrayList);\r\n            binding.destiRv.setAdapter(destinationAdapter);\r\n        } else {\r\n            destinationAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n    private void getDestinationDistance(Destination destination) {\r\n        database.getReference(\"Destination\").child(destination.getId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                double placeLat = Double.parseDouble(snapshot.child(\"latitude\").getValue().toString());\r\n                double placeLng = Double.parseDouble(snapshot.child(\"longitude\").getValue().toString());\r\n                if (coordinate != null) {\r\n                    currentLat = coordinate.latitude;\r\n                    currentLng = coordinate.longitude;\r\n                    distance = calculateDistance(currentLat, currentLng, placeLat, placeLng);\r\n                    destination.setDistance(distance);\r\n                    destinationAdapter.notifyDataSetChanged();\r\n\r\n                    new AsyncTask<Void, Void, String>() {\r\n                        @Override\r\n                        protected String doInBackground(Void... voids) {\r\n                            try {\r\n                                List<Address> addresses = geocoder.getFromLocation(currentLat, currentLng, 1);\r\n                                if (addresses.size() > 0) {\r\n                                    return addresses.get(0).getAddressLine(0);\r\n                                }\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            return null;\r\n                        }\r\n\r\n                        @Override\r\n                        protected void onPostExecute(String address) {\r\n                            if (address != null) {\r\n                                Log.d(\"ADDRESS\", address);\r\n                                binding.changeLoc.setText(address);\r\n                            }\r\n                        }\r\n                    }.execute();\r\n                } else {\r\n                    if (getContext() != null && ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&\r\n                            ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n                        ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_REQUEST_LOCATION);\r\n                    } else {\r\n                        fusedLocationClient.getLastLocation().addOnSuccessListener(location -> {\r\n                            if (location != null) {\r\n                                currentLat = location.getLatitude();\r\n                                currentLng = location.getLongitude();\r\n                                distance = calculateDistance(currentLat, currentLng, placeLat, placeLng);\r\n                                destination.setDistance(distance);\r\n                                sortDestination(destinationArrayList);\r\n                                destinationAdapter.notifyDataSetChanged();\r\n\r\n                                new AsyncTask<Void, Void, String>() {\r\n                                    @Override\r\n                                    protected String doInBackground(Void... voids) {\r\n                                        try {\r\n                                            List<Address> addresses = geocoder.getFromLocation(currentLat, currentLng, 1);\r\n                                            if (addresses.size() > 0) {\r\n                                                return addresses.get(0).getAddressLine(0);\r\n                                            }\r\n                                        } catch (IOException e) {\r\n                                            e.printStackTrace();\r\n                                        }\r\n                                        return null;\r\n                                    }\r\n\r\n                                    @Override\r\n                                    protected void onPostExecute(String address) {\r\n                                        if (address != null) {\r\n                                            Log.d(\"ADDRESS\", address);\r\n                                            binding.changeLoc.setText(address);\r\n                                        }\r\n                                    }\r\n                                }.execute();\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                Log.d(TAG, \"distance: \" + destination.getDistance());\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    };\r\n    private float calculateDistance(double lat1, double lon1, double lat2, double lon2) {\r\n        float[] results = new float[1];\r\n        Location location1 = new Location(\"\");\r\n        location1.setLatitude(lat1);\r\n        location1.setLongitude(lon1);\r\n        Location location2 = new Location(\"\");\r\n        location2.setLatitude(lat2);\r\n        location2.setLongitude(lon2);\r\n        Location.distanceBetween(location1.getLatitude(), location1.getLongitude(),\r\n                location2.getLatitude(), location2.getLongitude(), results);\r\n        return results[0] / 1000;\r\n    }\r\n\r\n    private void sortDestination(ArrayList<Destination> destinationArrayList){\r\n        Collections.sort(destinationArrayList, (destination1, destination2) -> {\r\n            String title1 = destination1.getTitle().toLowerCase();\r\n            String title2 = destination2.getTitle().toLowerCase();\r\n            return title1.compareTo(title2);\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    private void startLocationUpdates() {\r\n        if (!locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(getContext());\r\n            builder.setTitle(R.string.gpsnotEnabled);\r\n            builder.setMessage(R.string.enable_gps_confirm);\r\n            builder.setPositiveButton(R.string.yes_txt, (dialog, which) -> {\r\n                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\r\n                startActivity(intent);\r\n            });\r\n            builder.setNegativeButton(R.string.no_txt, null);\r\n            builder.show();\r\n        } else {\r\n            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 10000, 0, locationListener);\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/binus/pekalongancityguide/Layout/ShowDestinationFragment.java b/app/src/main/java/com/binus/pekalongancityguide/Layout/ShowDestinationFragment.java
--- a/app/src/main/java/com/binus/pekalongancityguide/Layout/ShowDestinationFragment.java	(revision 57c4058aeeed9cdb10889cde80a1e30269330a08)
+++ b/app/src/main/java/com/binus/pekalongancityguide/Layout/ShowDestinationFragment.java	(date 1683538706679)
@@ -119,7 +119,7 @@
             double longitude = Double.parseDouble(lastLongitude);
             coordinate = new LatLng(latitude, longitude);
         }
-        Log.d(TAG, "ON START COORDINATES: " + coordinate);
+//        Log.d(TAG, "ON START COORDINATES: " + coordinate);
         binding = FragmentShowDestinationBinding.inflate(LayoutInflater.from(getContext()), container, false);
         if (category.equals("All")) {
             loadDestinations();
@@ -187,17 +187,17 @@
     }
 
     private void showChangeLocDialog() {
-        if (isChangeLocDialogShowing) {
-            return;
-        }
+        if (isChangeLocDialogShowing) return;
         isChangeLocDialogShowing = true;
         AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
         DialogChangeLocBinding locBinding = DialogChangeLocBinding.inflate(getLayoutInflater());
         builder.setView(locBinding.getRoot());
         AlertDialog dialog = builder.create();
         dialog.setOnDismissListener(dialog1 -> {
-            getChildFragmentManager().beginTransaction().remove(fragment).commit();
-            getChildFragmentManager().beginTransaction().remove(autocompleteFragment).commit();
+            requireActivity().runOnUiThread(() -> {
+                getChildFragmentManager().beginTransaction().remove(fragment).commit();
+                getChildFragmentManager().beginTransaction().remove(autocompleteFragment).commit();
+            });
             isChangeLocDialogShowing = false;
         });
         dialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_background);
@@ -205,23 +205,32 @@
         if (!Places.isInitialized()) {
             Places.initialize(getActivity().getApplicationContext(), MAPS_API_KEY);
         }
-        List<Address> addresses = null;
-        try {
-            addresses = geocoder.getFromLocation(currentLat, currentLng, 1);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        if (addresses != null && addresses.size() > 0) {
-            Address address = addresses.get(0);
-            StringBuilder sb = new StringBuilder();
-            for (int i = 0; i <= address.getMaxAddressLineIndex(); i++) {
-                sb.append(address.getAddressLine(i)).append(", ");
+        new AsyncTask<Void, Void, String>() {
+            @Override
+            protected String doInBackground(Void... voids) {
+                try {
+                    List<Address> addresses = geocoder.getFromLocation(currentLat, currentLng, 1);
+                    if (addresses.size() > 0) {
+                        return addresses.get(0).getAddressLine(0);
+                    }
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+                return null;
             }
-            addressString = sb.toString();
-            locBinding.locTv.setText(addressString);
-        } else {
-            locBinding.locTv.setText("Address not found");
-        }
+
+            @Override
+            protected void onPostExecute(String address) {
+                // update the location text view in the UI thread
+                if (address != null) {
+                    addressString = address;
+                    locBinding.locTv.setText(addressString);
+                    autocompleteFragment.setText(addressString);
+                } else {
+                    locBinding.locTv.setText("Address not found");
+                }
+            }
+        }.execute();
         fragment = (SupportMapFragment) getChildFragmentManager()
                 .findFragmentById(R.id.user_map);
         fragment.getMapAsync(googleMap -> {
@@ -237,6 +246,7 @@
         PlacesClient placesClient = Places.createClient(getContext());
         autocompleteFragment = (AutocompleteSupportFragment) getChildFragmentManager().findFragmentById(R.id.autocomplete_fragment);
         autocompleteFragment.setPlaceFields(Arrays.asList(Place.Field.ID, Place.Field.NAME, Place.Field.ADDRESS, Place.Field.LAT_LNG));
+        autocompleteFragment.setCountries("ID");
         autocompleteFragment.setOnPlaceSelectedListener(new PlaceSelectionListener() {
             @Override
             public void onPlaceSelected(@NonNull Place place) {
